def aionrImage;

def oneOsImage(){

      node{
        stage ("build image for Ubuntu 18"){
          withCredentials([usernamePassword(credentialsId:'dockerHubID',usernameVariable:'dockerID', passwordVariable:'dockerPW')]) {
          checkout scm
          def package_origin = sh(returnStdout:true, script: "readlink -f ../AionR_release/package/aionr*").trim()
        //  kernel_version = sh(returnStdout:true,script:"cd ../AionR_release/ && git describe --tags --abbrev=0").trim()
          echo "${package_origin}"
          sh "cp -r ${package_origin} ./package"
          def package_location = "./package"
          def dockerfile = "Dockerfile18_04_env-with_binary"
          echo "${dockerfile}"
          def docker_dir= "Dockerfiles/"
          echo "${docker_dir}"

          docker.withRegistry('','dockerHubID'){
               aionrImage = docker.build("${dockerID}/ub18_aionr_binary:${params.kernel_version}", "-f ${docker_dir}${dockerfile} --build-arg PACKAGE_LOCATION=${package_location} .")

               }
           }
        }

        stage ("checkout tests"){
          sh 'rm -r qa-rpc || echo "no qa-rpc"'
          sh "git clone -b refactoring https://github.com/chaion/qa-rpc.git"
          sh "cd qa-rpc && npm install"
        }

        stage ("run test"){
          aionrImage.withRun('--network host --name image_test -v /root/.aion:/root/.aion','/bin/bash ./custom.sh --author=0xa07e185919beef1e0a79fea78fcfabc24927c5067d758e514ad74b905a2bf137'){ c ->


              sh "cd qa-rpc && ls"
              sh "./scripts/test.sh"
          }
       }
       stage ("save test result"){
          sh "ls"
          docker.withRegistry('','dockerHubID'){
            aionrImage.push("${params.kernel_version}")
          }
          junit 'qa-rpc/testReport/*'
          archiveArtifacts artifacts: 'qa-rpc/testReport/*.xml,qa-rpc/testlog/*.txt',fingerprint:true
          sh 'rm -r qa-rpc'

          slackSend channel: '@Miao',
                      color: 'good',
                      message: "${currentBuild.fullDisplayName} completed successfully. Grab the generated builds at ${env.BUILD_URL}\nArtifacts: ${env.BUILD_URL}artifact/\n Check rpc result: ${env.BUILD_URL}testReport/(root)/ \nCommit: ${GIT_COMMIT}"
       }
    }
}

try{
    oneOsImage()
} catch(caughtError){
    node{
        echo "${caughtError}"
        junit 'qa-rpc/testReport/*'
        archiveArtifacts artifacts: 'qa-rpc/testReport/*.xml,qa-rpc/testlog/*.txt',fingerprint:true
        sh 'rm -r qa-rpc'
        slackSend channel: '@Miao',
                    color: 'danger',
                    message: "${currentBuild.fullDisplayName} failed. Grab the generated builds at ${env.BUILD_URL}\nArtifacts: ${env.BUILD_URL}artifact/\n Check rpc result: ${env.BUILD_URL}testReport/(root)/ \nCommit: ${GIT_COMMIT}"

    }
}
